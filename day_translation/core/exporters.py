"""
ÂØºÂá∫ÂäüËÉΩÊ®°Âùó - ÂÆûÁé∞ÁøªËØëÊ®°ÊùøÂØºÂá∫„ÄÅDefInjected ÂØºÂá∫Á≠âÂäüËÉΩ
"""

import logging
import os
import re
import shutil
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import List, Tuple, Dict
import csv
from multiprocessing import Pool
from tqdm import tqdm
from ..utils.config import get_config
from ..utils.utils import XMLProcessor, save_xml_to_file, sanitize_xcomment, get_language_folder_path, sanitize_xml
from colorama import Fore, Style

CONFIG = get_config()

def move_dir(src: str, dst: str) -> None:
    """ÁßªÂä®ÁõÆÂΩïÔºåË¶ÜÁõñÂ∑≤Â≠òÂú®ÁõÆÂΩï"""
    if os.path.exists(dst):
        shutil.rmtree(dst)
    shutil.move(src, dst)
    import time
    time.sleep(1)
    print(f"{Fore.GREEN}ÈáçÂëΩÂêç {src} ‰∏∫ {dst}{Style.RESET_ALL}")

def export_definjected_from_english(
    mod_dir: str,
    export_dir: str,
    language: str = CONFIG.default_language,
    source_language: str = CONFIG.source_language
) -> None:
    """‰ªéËã±ÊñáÂØºÂá∫ DefInjected ÁøªËØëÔºåÊ∑ªÂä† EN Ê≥®Èáä"""
    logging.info("ÂØºÂá∫ DefInjected: mod_dir=%s, export_dir=%s", mod_dir, export_dir)
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    def_injected_path = os.path.join(lang_path, CONFIG.def_injected_dir)
    src_lang_path = get_language_folder_path(source_language, mod_dir)
    src_def_injected_path = os.path.join(src_lang_path, CONFIG.def_injected_dir)
    
    if not os.path.exists(def_injected_path):
        os.makedirs(def_injected_path)
        logging.info("ÂàõÂª∫Êñá‰ª∂Â§πÔºö%s", def_injected_path)
        
    if not os.path.exists(src_def_injected_path):
        logging.warning("Ëã±Êñá DefInjected ÁõÆÂΩï %s ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá", src_def_injected_path)
        return
        
    processor = XMLProcessor()
    
    for src_file in sorted(Path(src_def_injected_path).rglob("*.xml")):
        try:
            rel_path = os.path.relpath(src_file, src_def_injected_path)
            dst_file = os.path.join(def_injected_path, rel_path)
            os.makedirs(os.path.dirname(dst_file), exist_ok=True)
            shutil.copy2(src_file, dst_file)
            logging.info("Â§çÂà∂ %s Âà∞ %s", src_file, dst_file)
            
            tree = processor.parse_xml(str(dst_file))
            if tree is None:
                continue
                
            # Ê∑ªÂä†Ëã±ÊñáÊ≥®Èáä
            processor.add_comments(tree, comment_prefix="EN")
            processor.save_xml(tree, str(dst_file), pretty_print=True)
            
        except Exception as e:
            logging.error("Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥•: %s: %s", src_file, e)

def handle_extract_translate(
    mod_dir: str,
    export_dir: str,
    language: str = CONFIG.default_language,
    source_language: str = CONFIG.source_language,
    extract_definjected_from_defs=None
) -> str:
    """
    Â§ÑÁêÜÁøªËØëÊèêÂèñÈÄªËæëÔºåÈÄâÊã© DefInjected Êàñ Defs
    
    Returns:
        str: ÈÄâÊã©ÁöÑÊèêÂèñÊñπÂºè ('definjected' Êàñ 'defs')
    """
    logging.info("Â§ÑÁêÜÁøªËØëÊèêÂèñ: mod_dir=%s, export_dir=%s", mod_dir, export_dir)
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    def_injected_path = os.path.join(lang_path, CONFIG.def_injected_dir)
    old_def_linked_path = os.path.join(lang_path, "DefLinked")
    src_lang_path = get_language_folder_path(source_language, mod_dir)
    src_def_injected_path = os.path.join(src_lang_path, CONFIG.def_injected_dir)
    
    # Â§ÑÁêÜÊóßÁöÑ DefLinked ÁõÆÂΩï
    if os.path.exists(old_def_linked_path) and not os.path.exists(def_injected_path):
        move_dir(old_def_linked_path, def_injected_path)
    
    if os.path.exists(src_def_injected_path):
        print(f"\n{Fore.CYAN}Ê£ÄÊµãÂà∞Ëã±Êñá DefInjected ÁõÆÂΩï: {src_def_injected_path}{Style.RESET_ALL}")
        print(f"\n{Fore.YELLOW}ËØ∑ÈÄâÊã© DefInjected Â§ÑÁêÜÊñπÂºèÔºö{Style.RESET_ALL}")
        print(f"1. {Fore.GREEN}‰ª•Ëã±Êñá DefInjected ‰∏∫Âü∫Á°Ä{Style.RESET_ALL}")
        print(f"   üí° Âü∫‰∫éÁé∞ÊúâÁøªËØëÁªìÊûÑÔºå‰øùÊåÅÊñá‰ª∂ÁªÑÁªá‰∏ÄËá¥ÊÄß")
        print(f"   üí° ÁîüÊàêÂ∏¶'[ÂæÖÁøªËØë]'Ê†áËÆ∞ÁöÑÊ®°ÊùøÔºåÂåÖÂê´Ëã±ÊñáÂéüÊñá‰ΩúÂèÇËÄÉ")
        print(f"   üí° Êé®ËçêÁî®‰∫éÂ∑≤ÊúâÁøªËØëÂü∫Á°ÄÊàñÂ∏åÊúõ‰øùÊåÅÁªìÊûÑÁ®≥ÂÆöÁöÑÊÉÖÂÜµ")
        print(f"2. {Fore.GREEN}Áõ¥Êé•‰ªé Defs ÁõÆÂΩïÈáçÊñ∞ÊèêÂèñÂèØÁøªËØëÂ≠óÊÆµ{Style.RESET_ALL}")
        print(f"   üí° ÂÖ®ÈáèÊâ´ÊèèÊ®°ÁªÑÂÆö‰πâÊñá‰ª∂ÔºåÁ°Æ‰øù‰∏çÈÅóÊºè‰ªª‰ΩïÂèØÁøªËØëÂÜÖÂÆπ")
        print(f"   üí° Êé®ËçêÁî®‰∫éÈ¶ñÊ¨°ÁøªËØë„ÄÅÁªìÊûÑÊúâÂèòÂä®ÊàñÈúÄË¶ÅÂÆåÊï¥ÊèêÂèñÁöÑÊÉÖÂÜµ")
        print(f"b. {Fore.YELLOW}ËøîÂõû‰∏äÁ∫ßËèúÂçï{Style.RESET_ALL}")
        
        while True:
            choice = input(f"\n{Fore.CYAN}ËØ∑ËæìÂÖ•ÈÄâÈ°πÁºñÂè∑Ôºà1/2/bÔºåÂõûËΩ¶ÈªòËÆ§1ÔºâÔºö{Style.RESET_ALL}").strip().lower()
            
            if choice == 'b':
                raise KeyboardInterrupt("Áî®Êà∑ÈÄâÊã©ËøîÂõû")  # ‰ΩøÁî®ÂºÇÂ∏∏Êù•‰∏≠Êñ≠ÊµÅÁ®ã
            elif choice == "2":
                logging.info("Áî®Êà∑ÈÄâÊã©Ôºö‰ªé Defs ÁõÆÂΩïÈáçÊñ∞ÊèêÂèñ")
                print(f"{Fore.GREEN}‚úÖ Â∞Ü‰ªé Defs ÁõÆÂΩïÈáçÊñ∞ÊèêÂèñÂèØÁøªËØëÂ≠óÊÆµ{Style.RESET_ALL}")
                return "defs"
            elif choice == "" or choice == "1":
                logging.info("Áî®Êà∑ÈÄâÊã©Ôºö‰ª•Ëã±Êñá DefInjected ‰∏∫Âü∫Á°Ä")
                print(f"{Fore.GREEN}‚úÖ Â∞Ü‰ª•Ëã±Êñá DefInjected ‰∏∫Âü∫Á°ÄÁîüÊàêÊ®°Êùø{Style.RESET_ALL}")
                return "definjected"
            else:
                print(f"{Fore.RED}‚ùå Êó†ÊïàÈÄâÊã©ÔºåËØ∑ËæìÂÖ• 1„ÄÅ2 Êàñ b{Style.RESET_ALL}")
    else:
        logging.info("Êú™ÊâæÂà∞Ëã±Êñá DefInjected %sÔºå‰ªé Defs ÊèêÂèñ", src_def_injected_path)
        print(f"{Fore.YELLOW}Êú™ÊâæÂà∞Ëã±Êñá DefInjected ÁõÆÂΩïÔºåÂ∞Ü‰ªé Defs ÊèêÂèñÂèØÁøªËØëÂ≠óÊÆµ{Style.RESET_ALL}")
        return "defs"

def cleanup_backstories_dir(
    mod_dir: str,
    export_dir: str,
    language: str = CONFIG.default_language
) -> None:
    """Ê∏ÖÁêÜËÉåÊôØÊïÖ‰∫ãÁõÆÂΩï"""
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    backstories_path = os.path.join(lang_path, "Backstories")
    if os.path.exists(backstories_path):
        delete_me_path = os.path.join(lang_path, "Backstories DELETE_ME")
        try:
            shutil.move(backstories_path, delete_me_path)
            logging.info("ÈáçÂëΩÂêçËÉåÊôØÊïÖ‰∫ã‰∏∫ %s", delete_me_path)
            print(f"ËÉåÊôØÊïÖ‰∫ãÊñá‰ª∂Â§πÈáçÂëΩÂêç‰∏∫ {delete_me_path}ÔºåËØ∑Ê£ÄÊü•Âπ∂Âà†Èô§")
        except OSError as e:
            logging.error("Êó†Ê≥ïÈáçÂëΩÂêç %s: %s", backstories_path, e)

def export_keyed(
    mod_dir: str,
    export_dir: str,
    language: str = CONFIG.default_language,
    source_language: str = CONFIG.source_language
) -> None:
    """ÂØºÂá∫ Keyed ÁøªËØëÔºåÊ∑ªÂä† EN Ê≥®Èáä"""
    logging.info("ÂØºÂá∫ Keyed: mod_dir=%s, export_dir=%s", mod_dir, export_dir)
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    keyed_path = os.path.join(lang_path, CONFIG.keyed_dir)
    src_lang_path = get_language_folder_path(source_language, mod_dir)
    src_keyed_path = os.path.join(src_lang_path, CONFIG.keyed_dir)
    
    if not os.path.exists(keyed_path):
        os.makedirs(keyed_path)
        logging.info("ÂàõÂª∫Êñá‰ª∂Â§πÔºö%s", keyed_path)
        
    if not os.path.exists(src_keyed_path):
        logging.warning("Ëã±Êñá Keyed ÁõÆÂΩï %s ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá", src_keyed_path)
        return
        
    xml_files = list(Path(src_keyed_path).rglob("*.xml"))
    if not xml_files:
        logging.warning("Ëã±Êñá Keyed ÁõÆÂΩï %s Ê≤°Êúâ XML Êñá‰ª∂ÔºåË∑≥Ëøá", src_keyed_path)
        return
        
    processor = XMLProcessor()
    
    for src_file in xml_files:
        try:
            rel_path = os.path.relpath(src_file, src_keyed_path)
            dst_file = os.path.join(keyed_path, rel_path)
            os.makedirs(os.path.dirname(dst_file), exist_ok=True)
            shutil.copy2(src_file, dst_file)
            logging.info("Â§çÂà∂ %s Âà∞ %s", src_file, dst_file)
            
            tree = processor.parse_xml(str(dst_file))
            if tree is None:
                continue
                  # Ê∑ªÂä†Ëã±ÊñáÊ≥®Èáä
            processor.add_comments(tree, comment_prefix="EN")
            processor.save_xml(tree, str(dst_file), pretty_print=True)
            
        except Exception as e:
            logging.error("Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥•: %s: %s", src_file, e)

def process_def_file(
    xml_file: Path,
    selected_translations: List[Tuple[str, str, str, str]],
    processor: XMLProcessor
) -> Tuple[str, List[Tuple[str, List[Tuple[str, str, str]]]]]:
    """Â§ÑÁêÜÂçï‰∏™ Def XML Êñá‰ª∂"""
    try:
        tree = processor.parse_xml(str(xml_file))
        if tree is None:
            return str(xml_file), []
            
        root = tree.getroot() if processor.use_lxml else tree
        output_path = str(xml_file)
        pairs = []
        
        for def_node in root.findall(".//*[defName]"):
            def_type = def_node.tag
            def_name = def_node.find("defName")
            if def_name is None or not def_name.text:
                continue
                
            def_name_text = def_name.text
            prefix = f"{def_type}/{def_name_text}."
            filtered_translations = [
                (full_path[len(prefix):], text, tag)
                for full_path, text, tag, file_path in selected_translations
                if str(file_path) == str(xml_file) and full_path.startswith(prefix)
            ]
            
            if filtered_translations:
                pairs.append((def_name_text, filtered_translations))
                
        return output_path, pairs
        
    except Exception as e:
        logging.error("Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥•: %s: %s", xml_file, e)
        return str(xml_file), []

def process_def_file_wrapper(args: Tuple[Path, List[Tuple[str, str, str, str]]]) -> Tuple[str, List[Tuple[str, List[Tuple[str, str, str]]]]]:
    """ÂåÖË£ÖÂáΩÊï∞Ôºå‰æõ multiprocessing ‰ΩøÁî®"""
    xml_file, selected_translations = args
    processor = XMLProcessor()
    return process_def_file(xml_file, selected_translations, processor)

def export_definjected(
    mod_dir: str,
    export_dir: str,
    selected_translations: List[Tuple[str, str, str, str]],
    language: str = CONFIG.default_language
) -> None:
    """‰ªé Defs ÂØºÂá∫ DefInjected ÁøªËØëÔºåÁ°Æ‰øùÂåÖÂê´ÊâÄÊúâÂ≠óÊÆµ"""
    logging.info("ÂØºÂá∫ DefInjected: mod_dir=%s, translations_count=%s", mod_dir, len(selected_translations))
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    def_injected_path = os.path.join(lang_path, CONFIG.def_injected_dir)
    defs_path = os.path.join(mod_dir, "Defs")
    
    if not os.path.exists(def_injected_path):
        os.makedirs(def_injected_path)
        logging.info("ÂàõÂª∫Êñá‰ª∂Â§πÔºö%s", def_injected_path)
        
    # Ê∏ÖÁêÜÁé∞ÊúâÊñá‰ª∂
    for xml_file in Path(def_injected_path).rglob("*.xml"):
        try:
            os.remove(xml_file)
            logging.info("Âà†Èô§Êñá‰ª∂Ôºö%s", xml_file)
        except OSError as e:
            logging.error("Êó†Ê≥ïÂà†Èô§ %s: %s", xml_file, e)
            
    if not os.path.exists(defs_path):
        logging.warning("Defs ÁõÆÂΩï %s ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá", defs_path)
        return
        
    processor = XMLProcessor()
      # Êåâ DefType ÂàÜÁªÑÁøªËØëÂÜÖÂÆπ
    def_groups = {}
    for full_path, text, tag, file_path in selected_translations:
        if '/' in full_path:
            def_type_part, field_part = full_path.split('/', 1)
            
            # Ê∏ÖÁêÜ def_typeÔºöÁßªÈô§ÂëΩÂêçÁ©∫Èó¥ÂâçÁºÄÔºåÂè™‰øùÁïôÁ±ªÂûãÂêç
            # ‰æãÂ¶ÇÔºörjw.SexFluidDef -> SexFluidDef
            if '.' in def_type_part:
                def_type = def_type_part.split('.')[-1]  # ÂèñÊúÄÂêé‰∏Ä‰∏™ÈÉ®ÂàÜ
            else:
                def_type = def_type_part
            
            if '.' in field_part:
                def_name, field_path = field_part.split('.', 1)
            else:
                def_name = field_part
                field_path = ""
                
            if def_type not in def_groups:
                def_groups[def_type] = {}
            if def_name not in def_groups[def_type]:
                def_groups[def_type][def_name] = []
                
            def_groups[def_type][def_name].append((field_path, text, tag))
            
    # ‰∏∫ÊØè‰∏™ DefType ÁîüÊàê XML Êñá‰ª∂
    for def_type, def_items in def_groups.items():
        if not def_items:
            continue
            
        # ÂàõÂª∫ÂØπÂ∫îÁöÑÁõÆÂΩïÁªìÊûÑ
        type_dir = os.path.join(def_injected_path, f"{def_type}Defs")
        os.makedirs(type_dir, exist_ok=True)
        
        output_file = os.path.join(type_dir, f"{def_type}Defs.xml")
        
        # ÁîüÊàê XML ÂÜÖÂÆπ
        root = ET.Element("LanguageData")
        
        for def_name, fields in def_items.items():
            for field_path, text, tag in fields:
                # ÁîüÊàêÂÆåÊï¥ÁöÑÈîÆÂêç
                if field_path:
                    full_key = f"{def_name}.{field_path}"
                else:
                    full_key = def_name
                    
                # Ê∑ªÂä†Ëã±ÊñáÊ≥®Èáä
                comment = ET.Comment(sanitize_xcomment(f"EN: {text}"))
                root.append(comment)
                
                # Ê∑ªÂä†ÁøªËØëÂÖÉÁ¥†
                elem = ET.SubElement(root, full_key)
                elem.text = sanitize_xml(text)
                  # ‰øùÂ≠òÊñá‰ª∂
        tree = ET.ElementTree(root)
        processor.save_xml(tree, output_file, pretty_print=True)
        logging.info("ÁîüÊàê DefInjected Êñá‰ª∂: %s", output_file)

def export_definjected_to_csv(definjected_dir: str, output_csv: str) -> None:
    """Â∞Ü DefInjected ÁøªËØëÂØºÂá∫Âà∞ CSV"""
    logging.info("ÂØºÂá∫ DefInjected Âà∞ CSV: %s -> %s", definjected_dir, output_csv)
    processor = XMLProcessor()
    rows = []
    
    for xml_file in Path(definjected_dir).rglob("*.xml"):
        try:
            tree = processor.parse_xml(str(xml_file))
            if tree is None:
                continue
                
            root = tree.getroot() if processor.use_lxml else tree
            file_rows = 0
            
            # Â§ÑÁêÜ DefInjected ÁöÑÁâπÊÆäÁªìÊûÑ
            for elem in root:
                if isinstance(elem.tag, str) and elem.text and elem.text.strip():
                    key = elem.tag
                    text = elem.text.strip()
                    
                    # Ëé∑ÂèñÂâç‰∏Ä‰∏™Ê≥®Èáä‰Ωú‰∏∫Ëã±ÊñáÂéüÊñá
                    en_text = ""
                    prev = root.getprevious() if processor.use_lxml else None
                    if prev is not None and isinstance(prev, ET.Comment):
                        en_match = re.match(r'\s*EN:\s*(.*?)\s*$', prev.text)
                        if en_match:
                            en_text = en_match.group(1).strip()
                    
                    rows.append({
                        "key": key,
                        "text": sanitize_xml(text),
                        "en_text": sanitize_xml(en_text) if en_text else "",
                        "tag": key.split('.')[-1] if '.' in key else key
                    })
                    file_rows += 1
                    
            logging.info("‰ªé %s ÊèêÂèñ‰∫Ü %s Êù°ÁøªËØë", xml_file.name, file_rows)
            
        except Exception as e:
            logging.error("Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥•: %s: %s", xml_file, e)
            
    if rows:
        try:
            with open(output_csv, 'a', encoding='utf-8', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=["key", "text", "en_text", "tag"])
                writer.writerows(rows)
            logging.info("ËøΩÂä† %s Êù°ÁøªËØëÂà∞ %s", len(rows), output_csv)
        except Exception as e:
            logging.error("ÂÜôÂÖ• CSV Â§±Ë¥•: %s: %s", output_csv, e)
    else:
        logging.warning("Ê≤°ÊúâÊâæÂà∞ÂèØÂØºÂá∫ÁöÑÁøªËØë")

def export_keyed_to_csv(keyed_dir: str, output_csv: str) -> None:
    """Â∞Ü Keyed ÁøªËØëÂØºÂá∫Âà∞ CSV"""
    logging.info("ÂØºÂá∫ Keyed Âà∞ CSV: %s -> %s", keyed_dir, output_csv)
    processor = XMLProcessor()
    rows = []
    
    for xml_file in Path(keyed_dir).rglob("*.xml"):
        try:
            tree = processor.parse_xml(str(xml_file))
            if tree is None:
                continue
                
            root = tree.getroot() if processor.use_lxml else tree
            file_rows = 0
            
            for elem in root:
                if isinstance(elem.tag, str) and elem.text and elem.text.strip():
                    key = elem.tag
                    text = elem.text.strip()
                    
                    rows.append({
                        "key": key,
                        "text": sanitize_xml(text),
                        "tag": key.split('.')[-1] if '.' in key else key
                    })
                    file_rows += 1
            
            logging.info("‰ªé %s ÊèêÂèñ‰∫Ü %s Êù°ÁøªËØë", xml_file.name, file_rows)
            
        except Exception as e:
            logging.error("Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥•: %s: %s", xml_file, e)
            
    if rows:
        try:
            with open(output_csv, 'a', encoding='utf-8', newline='') as f:
                writer = csv.DictWriter(f, fieldnames=["key", "text", "tag"])
                writer.writerows(rows)
            logging.info("ËøΩÂä† %s Êù°ÁøªËØëÂà∞ %s", len(rows), output_csv)
        except Exception as e:
            logging.error("ÂÜôÂÖ• CSV Â§±Ë¥•: %s: %s", output_csv, e)
    else:
        logging.warning("Ê≤°ÊúâÊâæÂà∞ÂèØÂØºÂá∫ÁöÑÁøªËØë")

def export_definjected_with_original_structure(
    mod_dir: str,
    export_dir: str,
    selected_translations: List[Tuple[str, str, str, str]],
    language: str = CONFIG.default_language,
    source_language: str = CONFIG.source_language
) -> None:
    """ÊåâÁÖßÂéüËã±ÊñáDefInjectedÁõÆÂΩïÁªìÊûÑÂØºÂá∫ÁøªËØëÔºå‰øùÊåÅÊñá‰ª∂ÁªÑÁªá‰∏ÄËá¥"""
    logging.info("ÊåâÂéüÁªìÊûÑÂØºÂá∫ DefInjected: mod_dir=%s, translations_count=%s", mod_dir, len(selected_translations))
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    def_injected_path = os.path.join(lang_path, CONFIG.def_injected_dir)
    
    # Ëé∑ÂèñÂéüËã±ÊñáDefInjectedÁõÆÂΩï
    src_lang_path = get_language_folder_path(source_language, mod_dir)
    src_def_injected_path = os.path.join(src_lang_path, CONFIG.def_injected_dir)
    
    if not os.path.exists(src_def_injected_path):
        logging.warning("ÂéüËã±ÊñáDefInjectedÁõÆÂΩï‰∏çÂ≠òÂú®: %sÔºåÂõûÈÄÄÂà∞ÈªòËÆ§ÁªìÊûÑ", src_def_injected_path)
        # ÂõûÈÄÄÂà∞ÂéüÊù•ÁöÑÂáΩÊï∞
        export_definjected(mod_dir, export_dir, selected_translations, language)
        return
    
    if not os.path.exists(def_injected_path):
        os.makedirs(def_injected_path)
        logging.info("ÂàõÂª∫Êñá‰ª∂Â§πÔºö%s", def_injected_path)
    
    # Ê∏ÖÁêÜÁé∞ÊúâÊñá‰ª∂
    for xml_file in Path(def_injected_path).rglob("*.xml"):
        try:
            os.remove(xml_file)
            logging.info("Âà†Èô§Êñá‰ª∂Ôºö%s", xml_file)
        except OSError as e:
            logging.error("Êó†Ê≥ïÂà†Èô§ %s: %s", xml_file, e)
    
    processor = XMLProcessor()
    
    # 1. ÂàÜÊûêÂéüËã±ÊñáDefInjectedÊñá‰ª∂ÁªìÊûÑ
    original_files = {}  # {relative_path: xml_file_path}
    for xml_file in Path(src_def_injected_path).rglob("*.xml"):
        rel_path = str(xml_file.relative_to(Path(src_def_injected_path)))
        original_files[rel_path] = xml_file
    
    print(f"{Fore.CYAN}ÂèëÁé∞ÂéüËã±ÊñáDefInjectedÊñá‰ª∂ÁªìÊûÑÔºö{Style.RESET_ALL}")
    for rel_path in sorted(original_files.keys()):
        print(f"  üìÅ {rel_path}")
    
    # 2. Ëß£ÊûêÂéüÊñá‰ª∂ÔºåÂª∫Á´ãÈîÆÂà∞Êñá‰ª∂ÁöÑÊò†Â∞Ñ
    key_to_file_map = {}  # {full_key: relative_path}
    
    for rel_path, xml_file in original_files.items():
        try:
            tree = processor.parse_xml(str(xml_file))
            if tree is None:
                continue
                
            root = tree.getroot() if processor.use_lxml else tree
            
            # ÊèêÂèñÊâÄÊúâÈîÆ
            for elem in root:
                if isinstance(elem.tag, str) and not elem.tag.startswith('{'):
                    key_to_file_map[elem.tag] = rel_path
                    
        except Exception as e:
            logging.error("Ëß£ÊûêÂéüÊñá‰ª∂Â§±Ë¥• %s: %s", xml_file, e)
    
    logging.info("Âª∫Á´ãÈîÆÊò†Â∞Ñ: %s ‰∏™ÈîÆ", len(key_to_file_map))
    
    # 3. ÊåâÊñá‰ª∂ÂàÜÁªÑÁøªËØëÊï∞ÊçÆ
    file_groups = {}  # {relative_path: [(key, text, tag), ...]}
    unmatched_translations = []
    
    for full_path, text, tag, file_path in selected_translations:
        # ‰ªéfull_pathÊèêÂèñÈîÆÂêç
        if '/' in full_path:
            def_type_part, field_part = full_path.split('/', 1)
            if '.' in field_part:
                def_name, field_path = field_part.split('.', 1)
                full_key = f"{def_name}.{field_path}"
            else:
                full_key = field_part
        else:
            full_key = full_path
        
        # Êü•ÊâæÂØπÂ∫îÁöÑÂéüÊñá‰ª∂
        target_file = key_to_file_map.get(full_key)
        
        if target_file:
            if target_file not in file_groups:
                file_groups[target_file] = []
            file_groups[target_file].append((full_key, text, tag))
        else:
            # Êó†Ê≥ïÂåπÈÖçÂà∞ÂéüÊñá‰ª∂ÁöÑÁøªËØë
            unmatched_translations.append((full_path, text, tag, file_path))
    
    logging.info("Êñá‰ª∂ÂàÜÁªÑÂÆåÊàê: %s ‰∏™Êñá‰ª∂, %s ‰∏™Êú™ÂåπÈÖç", len(file_groups), len(unmatched_translations))
    
    # 4. ‰∏∫ÊØè‰∏™Êñá‰ª∂ÁîüÊàêÁøªËØëÂÜÖÂÆπ
    for rel_path, translations in file_groups.items():
        if not translations:
            continue
            
        # ÂàõÂª∫ÂØπÂ∫îÁöÑÁõÆÂΩïÁªìÊûÑ
        output_file = os.path.join(def_injected_path, rel_path)
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        # ÁîüÊàê XML ÂÜÖÂÆπ
        root = ET.Element("LanguageData")
        
        # ÊåâÈîÆÂêçÊéíÂ∫èÔºå‰øùÊåÅ‰∏ÄËá¥ÊÄß
        for full_key, text, tag in sorted(translations, key=lambda x: x[0]):
            # Ê∑ªÂä†Ëã±ÊñáÊ≥®Èáä
            comment = ET.Comment(sanitize_xcomment(f"EN: {text}"))
            root.append(comment)
            
            # Ê∑ªÂä†ÁøªËØëÂÖÉÁ¥†
            elem = ET.SubElement(root, full_key)
            elem.text = sanitize_xml(text)
        
        # ‰øùÂ≠òÊñá‰ª∂
        tree = ET.ElementTree(root)
        processor.save_xml(tree, output_file, pretty_print=True)
        logging.info("ÁîüÊàê DefInjected Êñá‰ª∂: %s (%s Êù°ÁøªËØë)", output_file, len(translations))
    
    # 5. Â§ÑÁêÜÊú™ÂåπÈÖçÁöÑÁøªËØëÔºàÂèØÈÄâÔºöÁîüÊàêÂà∞È¢ùÂ§ñÊñá‰ª∂Ôºâ
    if unmatched_translations:
        logging.warning("ÂèëÁé∞ %s Êù°Êú™ÂåπÈÖçÁöÑÁøªËØë", len(unmatched_translations))
        print(f"{Fore.YELLOW}‚ö†Ô∏è ÂèëÁé∞ {len(unmatched_translations)} Êù°Êú™ÂåπÈÖçÁöÑÁøªËØëÔºåÂ∞ÜÁîüÊàêÂà∞ _Additional.xml{Style.RESET_ALL}")
        
        # ÁîüÊàêÈ¢ùÂ§ñÊñá‰ª∂
        additional_file = os.path.join(def_injected_path, "_Additional.xml")
        root = ET.Element("LanguageData")
        
        for full_path, text, tag, file_path in unmatched_translations:
            # ‰ªéfull_pathÁîüÊàêÈîÆÂêç
            if '/' in full_path:
                def_type_part, field_part = full_path.split('/', 1)
                if '.' in field_part:
                    def_name, field_path = field_part.split('.', 1)
                    full_key = f"{def_name}.{field_path}"
                else:
                    full_key = field_part
            else:
                full_key = full_path
            
            comment = ET.Comment(sanitize_xcomment(f"EN: {text} (Êù•Ê∫ê: {file_path})"))
            root.append(comment)
            
            elem = ET.SubElement(root, full_key)
            elem.text = sanitize_xml(text)
        
        tree = ET.ElementTree(root)
        processor.save_xml(tree, additional_file, pretty_print=True)
        logging.info("ÁîüÊàêÈ¢ùÂ§ñÁøªËØëÊñá‰ª∂: %s", additional_file)

def export_definjected_with_defs_structure(
    mod_dir: str,
    export_dir: str,
    selected_translations: List[Tuple[str, str, str, str]],
    language: str = CONFIG.default_language
) -> None:
    """ÊåâÁÖßÂéüDefsÁõÆÂΩïÁªìÊûÑÂØºÂá∫DefInjectedÁøªËØë"""
    logging.info("ÊåâDefsÁªìÊûÑÂØºÂá∫ DefInjected: mod_dir=%s, translations_count=%s", mod_dir, len(selected_translations))
    mod_dir = str(Path(mod_dir).resolve())
    export_dir = str(Path(export_dir).resolve())
    lang_path = get_language_folder_path(language, export_dir)
    def_injected_path = os.path.join(lang_path, CONFIG.def_injected_dir)
    defs_path = os.path.join(mod_dir, "Defs")
    
    if not os.path.exists(def_injected_path):
        os.makedirs(def_injected_path)
        logging.info("ÂàõÂª∫Êñá‰ª∂Â§πÔºö%s", def_injected_path)
    
    # Ê∏ÖÁêÜÁé∞ÊúâÊñá‰ª∂
    for xml_file in Path(def_injected_path).rglob("*.xml"):
        try:
            os.remove(xml_file)
            logging.info("Âà†Èô§Êñá‰ª∂Ôºö%s", xml_file)
        except OSError as e:
            logging.error("Êó†Ê≥ïÂà†Èô§ %s: %s", xml_file, e)
    
    if not os.path.exists(defs_path):
        logging.warning("Defs ÁõÆÂΩï %s ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá", defs_path)
        return
        
    processor = XMLProcessor()
    
    # ÊåâÂéüÂßãÊñá‰ª∂Ë∑ØÂæÑÂàÜÁªÑÁøªËØëÂÜÖÂÆπÔºàÂü∫‰∫é file_path ‰ø°ÊÅØÔºâ
    file_groups = {}  # {original_file_path: [(key, text, tag), ...]}
    
    for full_path, text, tag, file_path in selected_translations:
        # ‰ªé full_path ÁîüÊàêÈîÆÂêç
        if '/' in full_path:
            def_type_part, field_part = full_path.split('/', 1)
            if '.' in field_part:
                def_name, field_path = field_part.split('.', 1)
                full_key = f"{def_name}.{field_path}"
            else:
                full_key = field_part
        else:
            full_key = full_path
        
        # ‰ΩøÁî® file_path ‰Ωú‰∏∫ÂàÜÁªÑ‰æùÊçÆ
        if file_path not in file_groups:
            file_groups[file_path] = []
        file_groups[file_path].append((full_key, text, tag))
    
    logging.info("ÊåâÊñá‰ª∂ÂàÜÁªÑÂÆåÊàê: %s ‰∏™Êñá‰ª∂", len(file_groups))
    
    # ‰∏∫ÊØè‰∏™ÂéüÂßãÊñá‰ª∂ÁîüÊàêÂØπÂ∫îÁöÑ DefInjected Êñá‰ª∂
    for original_file_path, translations in file_groups.items():
        if not translations:
            continue
        
        # ÁîüÊàê DefInjected Êñá‰ª∂Ë∑ØÂæÑ
        # ‰æãÂ¶ÇÔºöDefs/ThingDefs/Weapons.xml -> DefInjected/ThingDefs/Weapons.xml
        file_name = Path(original_file_path).stem  # Ëé∑Âèñ‰∏çÂ∏¶Êâ©Â±ïÂêçÁöÑÊñá‰ª∂Âêç
        
        # ‰ªéÁ¨¨‰∏Ä‰∏™ÁøªËØëÈ°π‰∏≠ÊèêÂèñ DefType
        first_translation = translations[0]
        first_full_path = None
        for full_path, text, tag, fp in selected_translations:
            if fp == original_file_path:
                first_full_path = full_path
                break
        
        if first_full_path and '/' in first_full_path:
            def_type_part = first_full_path.split('/', 1)[0]
            # Ê∏ÖÁêÜ def_type ÂêçÁß∞
            if '.' in def_type_part:
                def_type = def_type_part.split('.')[-1]
            else:
                def_type = def_type_part
        else:
            def_type = "UnknownDef"
        
        # ÂàõÂª∫ÁõÆÂΩïÁªìÊûÑÔºöDefInjected/ThingDefs/
        type_dir = os.path.join(def_injected_path, f"{def_type}Defs")
        os.makedirs(type_dir, exist_ok=True)
        
        # ÁîüÊàêÊñá‰ª∂ÔºöDefInjected/ThingDefs/Weapons.xml
        output_file = os.path.join(type_dir, f"{file_name}.xml")
        
        # ÁîüÊàê XML ÂÜÖÂÆπ
        root = ET.Element("LanguageData")
        
        # ÊåâÈîÆÂêçÊéíÂ∫èÔºå‰øùÊåÅ‰∏ÄËá¥ÊÄß
        for full_key, text, tag in sorted(translations, key=lambda x: x[0]):
            # Ê∑ªÂä†Ëã±ÊñáÊ≥®Èáä
            comment = ET.Comment(sanitize_xcomment(f"EN: {text}"))
            root.append(comment)
            
            # Ê∑ªÂä†ÁøªËØëÂÖÉÁ¥†
            elem = ET.SubElement(root, full_key)
            elem.text = sanitize_xml(text)
        
        # ‰øùÂ≠òÊñá‰ª∂
        tree = ET.ElementTree(root)
        processor.save_xml(tree, output_file, pretty_print=True)
        logging.info("ÁîüÊàê DefInjected Êñá‰ª∂: %s (%s Êù°ÁøªËØë)", output_file, len(translations))